// Generated by CoffeeScript 1.6.2
(function() {
  var cardToCardNum, config, createCanvas, drawBettingChips, drawBoard, drawEndResult, drawHands, drawNameBox, drawPot, drawSpectatorData, drawcard, dummyTableInfo, getPlayersXYByNum, imageName, images, loadingMovie, movieCounter, prepareForGames, setColorAndFont;

  config = {
    viewTestingFlag: false,
    canvasWidth: 1000,
    canvasHeight: 650,
    cardWidth: 48,
    cardHeight: 64,
    tableWidth: 750,
    tableHeight: 500,
    chipWidth: 32,
    chipHeight: 32,
    dealerButtonWidth: 25,
    dealerButtonHeight: 25,
    bettingChipFontSize: 15,
    chipAndChipMargin: 5,
    nameFontSize: 20,
    activeFrameBold: 4,
    blindFontSize: 15,
    potFontSize: 18,
    state: 'loading',
    mouseListener: false,
    clockTime: false,
    chipList: [1000, 500, 100, 50, 10, 5, 2, 1]
  };

  config.nameBoxWidth = config.cardWidth * 3;

  config.nameBoxHeight = Math.round(config.cardHeight * 3 / 2);

  config.tableX = Math.round(config.nameBoxWidth / 2);

  config.tableY = Math.round(config.nameBoxHeight / 2);

  imageName = ['Tranp.png', 'bg1.png', 'chip1.png', 'chip2.png', 'chip5.png', 'chip10.png', 'chip50.png', 'chip100.png', 'chip500.png', 'chip1000.png', 'dealerButton.png'];

  images = {};

  prepareForGames = function() {
    var checkLoad, i, image, loaded, loadedCount, socket, _i, _ref;

    socket = io.connect('http://' + host + ':' + port + '/spectator');
    socket.on('spectatorData', function(data) {
      config.state = 'drawing';
      return drawSpectatorData(data);
    });
    checkLoad = function() {
      loadedCount += 1;
      if (loadedCount === imageName.length) {
        return loaded();
      }
    };
    loadedCount = 0;
    for (i = _i = 0, _ref = imageName.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      image = document.createElement("img");
      image.src = "/images/" + imageName[i];
      image.onload = function() {
        return checkLoad();
      };
      images[imageName[i]] = image;
    }
    return loaded = function() {
      return config.state = "ready";
    };
  };

  drawSpectatorData = function(data) {
    var boardX, boardY, player, playerId, playersXY, _ref;

    if (config.viewTestingFlag === true) {
      data = dummyTableInfo(10, ['As', 'Jd', '2h', '5h', '3c']);
    }
    config.ctx.clearRect(0, 0, config.canvasWidth, config.canvasHeight);
    config.ctx.drawImage(images['bg1.png'], config.tableX, config.tableY);
    if (!data.players) {
      return;
    }
    playersXY = getPlayersXYByNum(data.players.length);
    boardX = config.tableX + Math.floor(config.tableWidth / 2) - Math.floor(config.cardWidth * 5 / 2);
    boardY = config.tableY + Math.floor(config.tableHeight / 2);
    _ref = data.players;
    for (playerId in _ref) {
      player = _ref[playerId];
      drawHands(player, playersXY[playerId].handsX, playersXY[playerId].handsY);
      drawNameBox(player, playersXY[playerId].nameX, playersXY[playerId].nameY, data.actionPlayerSeat);
      drawBoard(data.board, boardX, boardY);
      drawPot(data, boardX, boardY);
      drawBettingChips(player.lastBet, playersXY[playerId].chipX, playersXY[playerId].chipY);
      if (config.viewTestingFlag === true || Number(playerId) === Number(data.dealerButton)) {
        config.ctx.drawImage(images['dealerButton.png'], playersXY[playerId].dealerButtonX, playersXY[playerId].dealerButtonY, config.dealerButtonWidth, config.dealerButtonHeight);
      }
    }
    if (data.state === 'end') {
      return drawEndResult(data.players);
    }
  };

  movieCounter = 0;

  loadingMovie = function() {
    var i, loadingText, _i;

    if (config.state === 'loading') {
      setTimeout((function() {
        return loadingMovie();
      }), 50);
      config.ctx.clearRect(0, 0, config.canvasWidth, config.canvasHeight);
      config.ctx.fillStyle = "silver";
      config.ctx.font = "26px \'Times New Roman\'";
      loadingText = 'Loading';
      for (i = _i = 0; 0 <= movieCounter ? _i <= movieCounter : _i >= movieCounter; i = 0 <= movieCounter ? ++_i : --_i) {
        loadingText += '.';
      }
      config.ctx.fillText(loadingText, 100, 300);
      movieCounter++;
      if (movieCounter > 5) {
        return movieCounter = 0;
      }
    }
  };

  createCanvas = function() {
    var canvas, page;

    page = "<canvas id='canvas' width='" + config.canvasWidth + "' height='" + config.canvasHeight + "'> </canvas>";
    $('#tableDiv').html(page);
    canvas = $('#canvas').get(0);
    canvas.width = config.canvasWidth;
    canvas.height = config.canvasHeight;
    config.ctx = canvas.getContext("2d");
    return loadingMovie();
  };

  $(document).ready(function() {
    createCanvas();
    return prepareForGames();
  });

  drawHands = function(player, drawX, drawY) {
    if (!player.hand || !player.hand[0] || !player.hand[1]) {
      return;
    }
    drawcard(cardToCardNum(player.hand[0]), drawX, drawY);
    drawX += config.cardWidth;
    return drawcard(cardToCardNum(player.hand[1]), drawX, drawY);
  };

  drawNameBox = function(player, nameX, nameY, actionPlayerSeat) {
    setColorAndFont('black', 11);
    config.ctx.fillRect(nameX, nameY, config.nameBoxWidth, config.nameBoxHeight);
    if (config.viewTestingFlag === true || Number(actionPlayerSeat) === Number(player.id)) {
      setColorAndFont('blue', 0);
      config.ctx.fillRect(nameX, nameY + config.nameBoxHeight - config.activeFrameBold, config.nameBoxWidth, config.activeFrameBold);
      config.ctx.fillRect(nameX, nameY, config.nameBoxWidth, config.activeFrameBold);
      config.ctx.fillRect(nameX, nameY, config.activeFrameBold, config.nameBoxHeight);
      config.ctx.fillRect(nameX + config.nameBoxWidth - config.activeFrameBold, nameY, config.activeFrameBold, config.nameBoxHeight);
    }
    setColorAndFont('white', config.nameFontSize);
    config.ctx.fillText(player.name, nameX + config.activeFrameBold + 1, nameY + config.nameFontSize + 1);
    if (player.stack) {
      config.ctx.fillText(player.stack, nameX + config.activeFrameBold + 1, nameY + (config.nameFontSize + 1) * 2);
    }
    if (player.lastAction) {
      return config.ctx.fillText(player.lastAction, nameX + config.activeFrameBold + 1, nameY + (config.nameFontSize + 1) * 3);
    }
  };

  drawPot = function(tableData, boardX, boardY) {
    if (typeof tableData.level !== 'undefined') {
      setColorAndFont('black', config.blindFontSize);
      config.ctx.fillText('level ' + tableData.level + '    ' + tableData.bbAmount + ' / ' + Number(tableData.bbAmount / 2), boardX + config.cardWidth - Math.round(config.cardWidth / 2), boardY - 4);
    }
    if ((typeof tableData.pot !== 'undefined') && (typeof tableData.bettingTotal !== 'undefined')) {
      setColorAndFont('black', config.potFontSize);
      return config.ctx.fillText(tableData.pot + ' (' + (Number(tableData.pot) + Number(tableData.bettingTotal)) + ')', boardX + config.cardWidth + Math.round(config.cardWidth * 3 / 5), boardY - 4 - config.blindFontSize - 3);
    }
  };

  drawEndResult = function(players) {
    var drawX, drawY, player, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = players.length; _i < _len; _i++) {
      player = players[_i];
      setColorAndFont('black', config.nameFontSize);
      drawX = config.tableX + Math.floor(config.tableWidth / 2) - Math.floor(config.cardWidth * 5 / 2) + 10;
      drawY = config.tableY + Math.floor(config.tableHeight / 2) - 100;
      _results.push(config.ctx.fillText(player.name + ' won the Game!', drawX, drawY));
    }
    return _results;
  };

  drawBettingChips = function(chipAmount, x, y) {
    var chip, chipMany, chips, drawX, drawY, drawedCount, i, _i, _j, _k, _len, _ref, _ref1, _results;

    if (!chipAmount || chipAmount < 1) {
      return;
    }
    chips = [];
    setColorAndFont('black', config.bettingChipFontSize);
    config.ctx.fillText(chipAmount, x, y + config.chipHeight + config.bettingChipFontSize - 1);
    _ref = config.chipList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      chip = _ref[_i];
      chipMany = Math.floor(chipAmount / chip);
      for (i = _j = 0; 0 <= chipMany ? _j < chipMany : _j > chipMany; i = 0 <= chipMany ? ++_j : --_j) {
        chips.push(chip);
      }
      chipAmount -= chipMany * chip;
    }
    drawedCount = 0;
    _results = [];
    for (i = _k = _ref1 = chips.length - 1; _ref1 <= 0 ? _k <= 0 : _k >= 0; i = _ref1 <= 0 ? ++_k : --_k) {
      chip = chips[i];
      drawX = x;
      drawY = y - Math.floor(drawedCount / 2) * config.chipAndChipMargin;
      if (i % 2 === 0) {
        drawX += config.chipWidth;
      }
      config.ctx.drawImage(images['chip' + chip + '.png'], drawX, drawY, config.chipWidth, config.chipHeight);
      _results.push(drawedCount += 1);
    }
    return _results;
  };

  drawcard = function(cardnum, x, y) {
    var cardmany, cutx, cuty;

    cardmany = 10;
    cutx = (cardnum % cardmany) * config.cardWidth;
    cuty = ((cardnum / cardmany) | 0) * config.cardHeight;
    return config.ctx.drawImage(images["Tranp.png"], cutx, cuty, config.cardWidth, config.cardHeight, x, y, config.cardWidth, config.cardHeight);
  };

  drawBoard = function(board, drawX, drawY) {
    var boardCard, cardNum, _i, _len, _results;

    if (!board) {
      return;
    }
    _results = [];
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      boardCard = board[_i];
      cardNum = cardToCardNum(boardCard);
      drawcard(cardNum, drawX, drawY);
      _results.push(drawX += config.cardWidth);
    }
    return _results;
  };

  getPlayersXYByNum = function(playersNum) {
    var PlayersXY, i, _i;

    PlayersXY = [];
    PlayersXY[0] = {
      x: config.tableWidth * 0 / 5,
      y: Math.round(config.tableHeight * 2 / 4)
    };
    PlayersXY[1] = {
      x: config.tableWidth * 1 / 5,
      y: Math.round(config.tableHeight * 1 / 4)
    };
    PlayersXY[2] = {
      x: config.tableWidth * 2 / 5,
      y: Math.round(config.tableHeight * 0 / 4)
    };
    PlayersXY[3] = {
      x: config.tableWidth * 3 / 5,
      y: Math.round(config.tableHeight * 0 / 4)
    };
    PlayersXY[4] = {
      x: config.tableWidth * 4 / 5,
      y: Math.round(config.tableHeight * 1 / 4)
    };
    PlayersXY[5] = {
      x: config.tableWidth * 5 / 5,
      y: Math.round(config.tableHeight * 2 / 4)
    };
    PlayersXY[6] = {
      x: config.tableWidth * 4 / 5,
      y: Math.round(config.tableHeight * 3 / 4)
    };
    PlayersXY[7] = {
      x: config.tableWidth * 3 / 5,
      y: Math.round(config.tableHeight * 4 / 4)
    };
    PlayersXY[8] = {
      x: config.tableWidth * 2 / 5,
      y: Math.round(config.tableHeight * 4 / 4)
    };
    PlayersXY[9] = {
      x: config.tableWidth * 1 / 5,
      y: Math.round(config.tableHeight * 3 / 4)
    };
    PlayersXY[1].x -= config.chipWidth;
    PlayersXY[1].y -= config.chipHeight;
    PlayersXY[4].x += config.chipWidth;
    PlayersXY[4].y -= config.chipHeight;
    PlayersXY[6].x += config.chipWidth;
    PlayersXY[6].y += config.chipHeight;
    PlayersXY[9].x -= config.chipWidth;
    PlayersXY[9].y += config.chipHeight;
    for (i = _i = 0; 0 <= playersNum ? _i < playersNum : _i > playersNum; i = 0 <= playersNum ? ++_i : --_i) {
      PlayersXY[i].x += config.tableX;
      PlayersXY[i].y += config.tableY;
      PlayersXY[i].handsX = PlayersXY[i].x - config.cardWidth;
      PlayersXY[i].handsY = PlayersXY[i].y - Math.round(config.nameBoxHeight / 2);
      PlayersXY[i].nameX = PlayersXY[i].x - Math.round(config.nameBoxWidth / 2);
      PlayersXY[i].nameY = PlayersXY[i].y + Math.round(config.cardHeight / 4);
    }
    PlayersXY[0].chipX = PlayersXY[0].x + Math.round(config.nameBoxWidth / 2);
    PlayersXY[0].chipY = PlayersXY[0].y + Math.round(config.cardHeight / 4);
    PlayersXY[1].chipX = PlayersXY[1].x + Math.round(config.nameBoxWidth / 2);
    PlayersXY[1].chipY = PlayersXY[1].y + Math.round(config.cardHeight / 4) + config.nameBoxHeight - config.chipHeight;
    PlayersXY[2].chipX = PlayersXY[2].x - config.chipWidth;
    PlayersXY[2].chipY = PlayersXY[2].y + Math.round(config.cardHeight / 4) + config.nameBoxHeight;
    PlayersXY[3].chipX = PlayersXY[3].x - config.chipWidth;
    PlayersXY[3].chipY = PlayersXY[3].y + Math.round(config.cardHeight / 4) + config.nameBoxHeight;
    PlayersXY[4].chipX = PlayersXY[4].x - (Math.round(config.nameBoxWidth / 2) + config.chipWidth * 2);
    PlayersXY[4].chipY = PlayersXY[4].y + Math.round(config.cardHeight / 4) + config.nameBoxHeight - config.chipHeight;
    PlayersXY[5].chipX = PlayersXY[5].x - (Math.round(config.nameBoxWidth / 2) + config.chipWidth * 2);
    PlayersXY[5].chipY = PlayersXY[5].y + Math.round(config.cardHeight / 4);
    PlayersXY[6].chipX = PlayersXY[6].x - (config.cardWidth + config.chipWidth * 2);
    PlayersXY[6].chipY = PlayersXY[6].y + (Math.round(config.cardHeight / 4) - config.chipHeight - config.bettingChipFontSize);
    PlayersXY[7].chipX = PlayersXY[7].x - config.chipWidth;
    PlayersXY[7].chipY = PlayersXY[7].y + Math.round(config.cardHeight / 4) - config.cardHeight - config.chipHeight - config.bettingChipFontSize;
    PlayersXY[8].chipX = PlayersXY[8].x - config.chipWidth;
    PlayersXY[8].chipY = PlayersXY[8].y + Math.round(config.cardHeight / 4) - config.cardHeight - config.chipHeight - config.bettingChipFontSize;
    PlayersXY[9].chipX = PlayersXY[9].x + config.cardWidth;
    PlayersXY[9].chipY = PlayersXY[9].y + (Math.round(config.cardHeight / 4) - config.chipHeight - config.bettingChipFontSize);
    PlayersXY[0].dealerButtonX = PlayersXY[0].chipX + config.chipWidth * 2;
    PlayersXY[0].dealerButtonY = PlayersXY[0].chipY + config.chipHeight;
    PlayersXY[1].dealerButtonX = PlayersXY[1].chipX;
    PlayersXY[1].dealerButtonY = PlayersXY[1].chipY + config.chipHeight + config.bettingChipFontSize;
    PlayersXY[2].dealerButtonX = PlayersXY[2].chipX + Math.round(config.chipWidth / 2);
    PlayersXY[2].dealerButtonY = PlayersXY[2].chipY + config.chipHeight + config.bettingChipFontSize;
    PlayersXY[3].dealerButtonX = PlayersXY[3].chipX + Math.round(config.chipWidth / 2);
    PlayersXY[3].dealerButtonY = PlayersXY[3].chipY + config.chipHeight + config.bettingChipFontSize;
    PlayersXY[4].dealerButtonX = PlayersXY[4].chipX + config.chipWidth;
    PlayersXY[4].dealerButtonY = PlayersXY[4].chipY + config.chipHeight + config.bettingChipFontSize;
    PlayersXY[5].dealerButtonX = PlayersXY[5].chipX - config.dealerButtonWidth;
    PlayersXY[5].dealerButtonY = PlayersXY[5].chipY + config.chipHeight;
    PlayersXY[6].dealerButtonX = PlayersXY[6].chipX + Math.round(config.chipWidth / 2);
    PlayersXY[6].dealerButtonY = PlayersXY[6].chipY - config.dealerButtonHeight - config.bettingChipFontSize;
    PlayersXY[7].dealerButtonX = PlayersXY[7].chipX + Math.round(config.chipWidth / 2);
    PlayersXY[7].dealerButtonY = PlayersXY[7].chipY - config.dealerButtonHeight - config.bettingChipFontSize;
    PlayersXY[8].dealerButtonX = PlayersXY[8].chipX + Math.round(config.chipWidth / 2);
    PlayersXY[8].dealerButtonY = PlayersXY[8].chipY - config.dealerButtonHeight - config.bettingChipFontSize;
    PlayersXY[9].dealerButtonX = PlayersXY[9].chipX + Math.round(config.chipWidth / 2);
    PlayersXY[9].dealerButtonY = PlayersXY[9].chipY - config.dealerButtonHeight - config.bettingChipFontSize;
    return PlayersXY;
  };

  dummyTableInfo = function(playersNum, board) {
    var playerId, tableInfo, _i;

    tableInfo = {
      board: board,
      level: 13,
      pot: 18000,
      bettingTotal: 3500 * 10,
      bbAmount: 3500,
      players: []
    };
    for (playerId = _i = 0; 0 <= playersNum ? _i < playersNum : _i > playersNum; playerId = 0 <= playersNum ? ++_i : --_i) {
      tableInfo.players[playerId] = {
        playerId: playerId,
        name: 'dummy' + playerId,
        hand: ['Ks', 'Ah'],
        stack: 15000,
        lastBet: 3500
      };
    }
    return tableInfo;
  };

  cardToCardNum = function(card) {
    var cardNum;

    switch (card.charAt(1)) {
      case 's':
        cardNum = 0;
        break;
      case 'c':
        cardNum = 13;
        break;
      case 'd':
        cardNum = 26;
        break;
      case 'h':
        cardNum = 39;
        break;
      default:
        return 53;
    }
    switch (card.charAt(0)) {
      case 'A':
        cardNum += 0;
        break;
      case 'K':
        cardNum += 12;
        break;
      case 'Q':
        cardNum += 11;
        break;
      case 'J':
        cardNum += 10;
        break;
      case 'T':
        cardNum += 9;
        break;
      default:
        cardNum += Number(card.charAt(0)) - 1;
    }
    return cardNum;
  };

  setColorAndFont = function(color, size) {
    config.ctx.fillStyle = color;
    return config.ctx.font = size + "px \'Times New Roman\'";
  };

}).call(this);
