// Generated by CoffeeScript 1.6.2
(function() {
  var Config, blindUp, createDeck, dealPlayersHands, gameStart, getInfo, getState, getTableInfo, intervalTime, join, level, playersCount, shuffleArray, shufflePlayers, state, structure, tables;

  Config = require('../config');

  tables = {};

  playersCount = 0;

  structure = Config.getStructure();

  intervalTime = Config.getIntervalTime();

  state = 'waiting';

  level = 0;

  join = function(name, key, socketId) {
    if (!tables[0] || tables[0].players.length < 10) {
      if (!tables[0]) {
        tables[0] = {};
      }
      if (!tables[0].players) {
        tables[0].players = [];
      }
      tables[0].players[tables[0].players.length] = {
        id: playersCount,
        name: name,
        key: key,
        socketId: socketId,
        isActive: false,
        win: null,
        tie: null,
        hand: []
      };
    }
    return playersCount += 1;
  };

  gameStart = function() {
    var bbPosition, i, key, sbPosition, stack, table, _i, _ref;

    level = 0;
    stack = Config.getStack();
    for (key in tables) {
      table = tables[key];
      tables[key].players = [].concat(shufflePlayers(tables[key].players));
      tables[key].dealerButton = Math.floor(Math.random() * tables[key].players.length);
      tables[key].pot = 0;
      for (i = _i = 0, _ref = tables[key].players.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        tables[key].players[i].stack = 10000;
      }
      sbPosition = (tables[key].dealerButton + 1) % tables[key].players.length;
      bbPosition = (tables[key].dealerButton + 2) % tables[key].players.length;
      console.log('sbPosition = ' + sbPosition);
      console.log('bbPosition = ' + bbPosition);
      tables[key].pot += Number(structure[level] / 2);
      tables[key].players[sbPosition].stack -= Number(structure[level] / 2);
      console.log('tables[key].players[sbPosition].stack = ' + tables[key].players[sbPosition].stack);
      console.log('tables[key].players[bbPosition].stack = ' + tables[key].players[bbPosition].stack);
      tables[key].pot += structure[level];
      tables[key].players[bbPosition].stack -= structure[level];
      console.log('tables[key].players[sbPosition].stack = ' + tables[key].players[sbPosition].stack);
      console.log('tables[key].players[bbPosition].stack = ' + tables[key].players[bbPosition].stack);
      dealPlayersHands(key);
    }
    setTimeout(function() {
      return blindUp();
    }, intervalTime);
    return state = 'gaming';
  };

  getInfo = function() {
    var info, key, value;

    info = {
      state: state,
      level: level,
      tables: {}
    };
    for (key in tables) {
      value = tables[key];
      info.tables[key] = {
        pot: tables[key].pot,
        dealerButton: tables[key].dealerButton,
        players: tables[key].players
      };
    }
    return info;
  };

  getState = function() {
    return state;
  };

  getTableInfo = function(tableId) {
    var key, player, tableInfo, _ref;

    tableInfo = {
      state: state,
      level: level,
      pot: tables[tableId].pot,
      dealerButton: tables[tableId].dealerButton,
      players: []
    };
    _ref = tables[tableId].players;
    for (key in _ref) {
      player = _ref[key];
      tableInfo.players[key] = {
        name: player.name,
        stack: player.stack,
        isActive: player.isActive
      };
    }
    return tableInfo;
  };

  module.exports = {
    join: join,
    getInfo: getInfo,
    gameStart: gameStart,
    getState: getState,
    getTableInfo: getTableInfo
  };

  blindUp = function() {
    level += 1;
    return setTimeout(function() {
      return blindUp();
    }, intervalTime);
  };

  dealPlayersHands = function(tableId) {
    var cardPosition, i, key, value, _i, _ref;

    tables[tableId].deck = [].concat(createDeck());
    for (i = _i = 0; _i < 2; i = ++_i) {
      _ref = tables[tableId].players;
      for (key in _ref) {
        value = _ref[key];
        cardPosition = Math.floor(Math.random() * tables[tableId].deck.length);
        tables[tableId].players[key].hand[i] = tables[tableId].deck[cardPosition];
        tables[tableId].deck.splice(cardPosition, 1);
        tables[tableId].players[key].isActive = true;
      }
    }
    return console.log('check it!');
  };

  createDeck = function() {
    var trumps;

    trumps = ['As', '2s', '3s', '4s', '5s', '6s', '7s', '8s', '9s', 'Ts', 'Js', 'Qs', 'Ks', 'Ah', '2h', '3h', '4h', '5h', '6h', '7h', '8h', '9h', 'Th', 'Jh', 'Qh', 'Kh', 'Ad', '2d', '3d', '4d', '5d', '6d', '7d', '8d', '9d', 'Td', 'Jd', 'Qd', 'Kd', 'Ac', '2c', '3c', '4c', '5c', '6c', '7c', '8c', '9c', 'Tc', 'Jc', 'Qc', 'Kc'];
    return shuffleArray(trumps);
  };

  shuffleArray = function(targetArray) {
    var j, key, length, t, value;

    length = targetArray.length;
    for (key in targetArray) {
      value = targetArray[key];
      j = Math.floor(Math.random() * length);
      t = value;
      targetArray[j] = value;
      targetArray[key] = t;
    }
    return targetArray;
  };

  shufflePlayers = function(players) {
    var j, key, length, t, value;

    length = players.length;
    for (key in players) {
      value = players[key];
      j = Math.floor(Math.random() * length);
      t = {};
      t = value;
      players[j] = {};
      players[j] = value;
      players[key] = {};
      players[key] = t;
    }
    return players;
  };

}).call(this);
