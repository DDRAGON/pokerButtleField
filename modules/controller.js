// Generated by CoffeeScript 1.6.2
(function() {
  var Config, WinPer, action, addHasActionToActives, blindUp, createDeck, dealPlayersHands, dealPreFlop, dealRiver, dealTurn, findNextActionPlayerSeat, gameStart, getActionPlayer, getInfo, getNextCommand, getState, getTableInfo, getTableInfoForWebSocketter, goToNextHand, goToNextPhase, goToNextTurn, intervalTime, join, level, playersCount, randobet, setPositions, setSbBbChips, showDown, shuffleArray, shufflePlayers, state, structure, tables;

  Config = require('../config');

  WinPer = require('./WinPer');

  tables = {};

  playersCount = 0;

  structure = Config.getStructure();

  intervalTime = Config.getIntervalTime();

  state = 'waiting';

  level = 0;

  join = function(data, socketId, callback) {
    var key, name, tableId;

    name = data.name;
    tableId = 0;
    if (!name) {
      return callback({
        response: 'fail',
        errorMessage: 'no name here!'
      });
    } else {
      key = randobet(28 + Math.floor(Math.random() * 6), '');
      if (!tables[0] || tables[0].players.length < 10) {
        if (!tables[0]) {
          tables[0] = {};
        }
        if (!tables[0].players) {
          tables[0].players = [];
        }
        tables[0].players[tables[0].players.length] = {
          id: playersCount,
          name: name,
          key: key,
          socketId: socketId,
          isActive: false,
          hasAction: false,
          win: null,
          tie: null,
          hand: []
        };
      }
      playersCount += 1;
      return callback({
        response: 'ok',
        key: key
      });
    }
  };

  gameStart = function() {
    var i, stack, table, tableId, _i, _ref;

    level = 0;
    stack = Config.getStack();
    for (tableId in tables) {
      table = tables[tableId];
      table.players = [].concat(shufflePlayers(table.players));
      console.log('shuffled players = ' + table.players);
      table.dealerButton = Math.floor(Math.random() * table.players.length);
      table.playedHandCount = 0;
      table.lastBet = 0;
      table.pot = 0;
      table.playersNum = table.players.length;
      table.activePlayersNum = table.players.length;
      table.hasActionPlayersNum = table.players.length;
      table.board = [];
      table.state = 'preFlop';
      for (i = _i = 0, _ref = table.players.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        table.players[i].stack = stack;
        tables[tableId].players[i].isActive = true;
        tables[tableId].players[i].hasAction = true;
        tables[tableId].players[i].lastBet = 0;
      }
      setPositions(tableId);
      setSbBbChips(tableId);
      dealPlayersHands(tableId);
    }
    setTimeout(function() {
      return blindUp();
    }, intervalTime);
    return state = 'gaming';
  };

  getInfo = function() {
    var info, table, tableId;

    info = {
      state: state,
      level: level,
      tables: {}
    };
    for (tableId in tables) {
      table = tables[tableId];
      info.tables[tableId] = {
        pot: table.pot,
        lastBet: table.lastBet,
        dealerButton: table.dealerButton,
        playedHandCount: table.playedHandCount,
        playersNum: table.playersNum,
        activePlayersNum: table.activePlayersNum,
        players: table.players
      };
    }
    return info;
  };

  getState = function() {
    return state;
  };

  getTableInfo = function(tableId) {
    var key, player, tableInfo, _ref;

    tableInfo = {
      state: tables[tableId].state,
      level: level,
      pot: tables[tableId].pot,
      lastBet: tables[tableId].lastBet,
      dealerButton: tables[tableId].dealerButton,
      playedHandCount: tables[tableId].playedHandCount,
      playersNum: tables[tableId].playersNum,
      activePlayersNum: tables[tableId].activePlayersNum,
      board: tables[tableId].board,
      players: []
    };
    _ref = tables[tableId].players;
    for (key in _ref) {
      player = _ref[key];
      tableInfo.players[key] = {
        name: player.name,
        stack: player.stack,
        isActive: player.isActive,
        lastBet: player.lastBet
      };
    }
    return tableInfo;
  };

  getTableInfoForWebSocketter = function(tableId) {
    return tables[tableId];
  };

  getActionPlayer = function(tableId) {
    return tables[tableId].players[tables[tableId].actionPlayerSeat];
  };

  action = function(data, callback) {
    var actionPlayerSeat, amount, betAmount, key, nextCommand, player, playerSeat, tableId, winPlayerSeat, _ref;

    key = data.key;
    action = data.action;
    amount = data.amount;
    tableId = 0;
    if (key === tables[tableId].players[tables[tableId].actionPlayerSeat].key) {
      actionPlayerSeat = tables[tableId].actionPlayerSeat;
      switch (action) {
        case 'fold':
          tables[tableId].players[actionPlayerSeat].isActive = false;
          tables[tableId].players[actionPlayerSeat].hasAction = false;
          tables[tableId].activePlayersNum -= 1;
          tables[tableId].hasActionPlayersNum -= 1;
          nextCommand = getNextCommand(tableId);
          if (nextCommand === 'nextHand') {
            winPlayerSeat = 0;
            _ref = tables[tableId].players;
            for (playerSeat in _ref) {
              player = _ref[playerSeat];
              if (player.isActive === true) {
                winPlayerSeat = playerSeat;
              }
            }
            tables[tableId].players[winPlayerSeat].stack += tables[tableId].pot;
            callback({
              status: 'ok',
              message: 'got fold.',
              nextCommand: nextCommand,
              sendAllTables: {
                takenAction: 'fold',
                tableInfo: getTableInfo(tableId),
                message: tables[tableId].players[winPlayerSeat].name + ' takes pot ' + tables[tableId].pot
              }
            });
            return console.log('go to next hand');
          } else {
            return callback({
              status: 'ok',
              message: 'got fold.',
              nextCommand: nextCommand,
              sendAllTables: {
                takenAction: 'fold',
                tableInfo: getTableInfo(tableId),
                message: nextCommand
              }
            });
          }
          break;
        case 'check':
          tables[tableId].players[actionPlayerSeat].hasAction = false;
          tables[tableId].hasActionPlayersNum -= 1;
          nextCommand = getNextCommand(tableId);
          return callback({
            status: 'ok',
            message: 'got check.',
            nextCommand: nextCommand,
            sendAllTables: {
              takenAction: 'check',
              tableInfo: getTableInfo(tableId),
              message: nextCommand
            }
          });
        case 'call':
          betAmount = tables[tableId].lastBet - tables[tableId].players[actionPlayerSeat].lastBet;
          tables[tableId].pot += betAmount;
          tables[tableId].players[actionPlayerSeat].stack -= betAmount;
          tables[tableId].players[actionPlayerSeat].lastBet = tables[tableId].lastBet;
          tables[tableId].players[actionPlayerSeat].hasAction = false;
          tables[tableId].hasActionPlayersNum -= 1;
          nextCommand = getNextCommand(tableId);
          return callback({
            status: 'ok',
            message: 'got call.',
            nextCommand: nextCommand,
            sendAllTables: {
              takenAction: 'call',
              tableInfo: getTableInfo(tableId),
              message: nextCommand
            }
          });
        case 'raise':
          if (amount < tables[tableId].lastBet + tables[tableId].differenceAmount) {
            amount = tables[tableId].lastBet + tables[tableId].differenceAmount;
          }
          betAmount = amount - tables[tableId].players[actionPlayerSeat].lastBet;
          tables[tableId].pot += betAmount;
          tables[tableId].players[actionPlayerSeat].stack -= betAmount;
          tables[tableId].differenceAmount = amount - tables[tableId].lastBet;
          tables[tableId].lastBet = amount;
          tables[tableId].players[actionPlayerSeat].lastBet = amount;
          addHasActionToActives(tableId);
          tables[tableId].players[actionPlayerSeat].hasAction = false;
          tables[tableId].hasActionPlayersNum -= 1;
          return callback({
            status: 'ok',
            message: 'got raise ' + amount + ', pot: ' + tables[tableId].pot,
            nextCommand: 'nextTurn',
            sendAllTables: {
              takenAction: 'raise',
              tableInfo: getTableInfo(tableId),
              message: 'go to next turn'
            }
          });
      }
    } else {
      return callback('ignroe');
    }
  };

  goToNextTurn = function(tableId) {
    console.log('goToNextTurn called.');
    return tables[tableId].actionPlayerSeat = findNextActionPlayerSeat(tableId);
  };

  goToNextPhase = function(tableId) {
    console.log('goToNextPhase called.');
    switch (tables[tableId].state) {
      case 'preFlop':
        console.log('preFlop');
        dealPreFlop(tableId);
        tables[tableId].state = 'flop';
        break;
      case 'flop':
        console.log('flop');
        dealTurn(tableId);
        tables[tableId].state = 'turn';
        break;
      case 'turn':
        console.log('turn');
        dealRiver(tableId);
        tables[tableId].state = 'river';
    }
    addHasActionToActives(tableId);
    return tables[tableId].actionPlayerSeat = (tables[tableId].dealerButton + 1) % tables[tableId].players.length;
  };

  goToNextHand = function(tableId) {
    var player, playerId, _ref;

    console.log('goToNextHand called.');
    tables[tableId].dealerButton = (tables[tableId].dealerButton + 1) % tables[tableId].players.length;
    tables[tableId].playedHandCount += 1;
    tables[tableId].lastBet = 0;
    tables[tableId].pot = 0;
    tables[tableId].playersNum = tables[tableId].players.length;
    tables[tableId].activePlayersNum = tables[tableId].players.length;
    tables[tableId].hasActionPlayersNum = tables[tableId].players.length;
    tables[tableId].board = [];
    tables[tableId].state = 'preFlop';
    _ref = tables[tableId].players;
    for (playerId in _ref) {
      player = _ref[playerId];
      tables[tableId].players[playerId].isActive = true;
      tables[tableId].players[playerId].hasAction = true;
      tables[tableId].players[playerId].lastBet = 0;
    }
    setPositions(tableId);
    setSbBbChips(tableId);
    return dealPlayersHands(tableId);
  };

  showDown = function(tableId, callback) {
    var dividedPot, key, message, targetPlayerId, value, winPlayers, winPlayersNum;

    WinPer.getPlayersPointAndKicker(tables[tableId]);
    winPlayers = WinPer.getWinPlayer(tables[tableId]);
    winPlayersNum = winPlayers.length;
    dividedPot = Math.floor(tables[tableId].pot / winPlayersNum);
    message = '';
    for (key in winPlayers) {
      value = winPlayers[key];
      targetPlayerId = winPlayers[key].id;
      tables[tableId].players[targetPlayerId].stack += dividedPot;
      message += ' ' + tables[tableId].players[targetPlayerId].name;
    }
    message += ' won the pot: ' + dividedPot;
    return callback(message);
  };

  module.exports = {
    join: join,
    getInfo: getInfo,
    gameStart: gameStart,
    getState: getState,
    getTableInfo: getTableInfo,
    getTableInfoForWebSocketter: getTableInfoForWebSocketter,
    getActionPlayer: getActionPlayer,
    action: action,
    goToNextTurn: goToNextTurn,
    goToNextPhase: goToNextPhase,
    goToNextHand: goToNextHand,
    showDown: showDown
  };

  blindUp = function() {
    level += 1;
    return setTimeout(function() {
      return blindUp();
    }, intervalTime);
  };

  dealPlayersHands = function(tableId) {
    var cardPosition, handNum, i, playersNum, sbPosition, _i, _results;

    tables[tableId].deck = [].concat(createDeck());
    playersNum = tables[tableId].playersNum;
    sbPosition = tables[tableId].sbPosition;
    _results = [];
    for (handNum = _i = 0; _i < 2; handNum = ++_i) {
      _results.push((function() {
        var _j, _results1;

        _results1 = [];
        for (i = _j = 0; 0 <= playersNum ? _j < playersNum : _j > playersNum; i = 0 <= playersNum ? ++_j : --_j) {
          cardPosition = Math.floor(Math.random() * tables[tableId].deck.length);
          tables[tableId].players[(i + sbPosition) % playersNum].hand[handNum] = tables[tableId].deck[cardPosition];
          _results1.push(tables[tableId].deck.splice(cardPosition, 1));
        }
        return _results1;
      })());
    }
    return _results;
  };

  dealPreFlop = function(tableId) {
    var cardPosition, i, _i, _results;

    _results = [];
    for (i = _i = 0; _i < 3; i = ++_i) {
      cardPosition = Math.floor(Math.random() * tables[tableId].deck.length);
      tables[tableId].board[i] = tables[tableId].deck[cardPosition];
      _results.push(tables[tableId].deck.splice(cardPosition, 1));
    }
    return _results;
  };

  dealTurn = function(tableId) {
    var cardPosition;

    cardPosition = Math.floor(Math.random() * tables[tableId].deck.length);
    tables[tableId].board[3] = tables[tableId].deck[cardPosition];
    return tables[tableId].deck.splice(cardPosition, 1);
  };

  dealRiver = function(tableId) {
    var cardPosition;

    cardPosition = Math.floor(Math.random() * tables[tableId].deck.length);
    tables[tableId].board[4] = tables[tableId].deck[cardPosition];
    return tables[tableId].deck.splice(cardPosition, 1);
  };

  findNextActionPlayerSeat = function(tableId) {
    var checkSeat, i, nowActionPlayerSeat, _i, _ref;

    nowActionPlayerSeat = tables[tableId].actionPlayerSeat;
    for (i = _i = 1, _ref = tables[tableId].players.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
      checkSeat = (nowActionPlayerSeat + i) % tables[tableId].players.length;
      if (tables[tableId].players[checkSeat].isActive === true) {
        return checkSeat;
      }
    }
  };

  getNextCommand = function(tableId) {
    console.log('getNextCommand called');
    console.log('hasActionPlayersNum = ' + tables[tableId].hasActionPlayersNum);
    if (tables[tableId].activePlayersNum === 1) {
      return 'nextHand';
    } else if (tables[tableId].hasActionPlayersNum === 0 && tables[tableId].state === 'river') {
      return 'showDown';
    } else if (tables[tableId].hasActionPlayersNum === 0) {
      return 'nextPhase';
    } else {
      return 'nextTurn';
    }
  };

  addHasActionToActives = function(tableId) {
    var hasActionCounter, player, playerId, _ref;

    console.log('addHasActionToActives called');
    hasActionCounter = 0;
    _ref = tables[tableId].players;
    for (playerId in _ref) {
      player = _ref[playerId];
      if (player.isActive === true) {
        tables[tableId].players[playerId].hasAction = true;
        hasActionCounter += 1;
      }
    }
    tables[tableId].hasActionPlayersNum = hasActionCounter;
    return console.log('hasActionCounter = ' + hasActionCounter);
  };

  setPositions = function(tableId) {
    var dealerButton;

    dealerButton = tables[tableId].dealerButton;
    if (tables[tableId].playersNum === 2) {
      tables[tableId].sbPosition = dealerButton;
      tables[tableId].bbPosition = (dealerButton + 1) % tables[tableId].playersNum;
    } else {
      tables[tableId].sbPosition = (dealerButton + 1) % tables[tableId].playersNum;
      tables[tableId].bbPosition = (dealerButton + 2) % tables[tableId].playersNum;
    }
    return tables[tableId].actionPlayerSeat = (tables[tableId].bbPosition + 1) % tables[tableId].playersNum;
  };

  setSbBbChips = function(tableId) {
    var BBAmount, bbPosition, sbPosition;

    BBAmount = structure[level];
    sbPosition = tables[tableId].sbPosition;
    bbPosition = tables[tableId].bbPosition;
    tables[tableId].pot += Number(BBAmount / 2);
    tables[tableId].players[sbPosition].stack -= Number(BBAmount / 2);
    tables[tableId].players[sbPosition].lastBet = Number(BBAmount / 2);
    tables[tableId].pot += BBAmount;
    tables[tableId].players[bbPosition].stack -= BBAmount;
    tables[tableId].players[bbPosition].lastBet = BBAmount;
    tables[tableId].lastBet = BBAmount;
    return tables[tableId].differenceAmount = BBAmount;
  };

  createDeck = function() {
    var trumps;

    trumps = ['As', '2s', '3s', '4s', '5s', '6s', '7s', '8s', '9s', 'Ts', 'Js', 'Qs', 'Ks', 'Ah', '2h', '3h', '4h', '5h', '6h', '7h', '8h', '9h', 'Th', 'Jh', 'Qh', 'Kh', 'Ad', '2d', '3d', '4d', '5d', '6d', '7d', '8d', '9d', 'Td', 'Jd', 'Qd', 'Kd', 'Ac', '2c', '3c', '4c', '5c', '6c', '7c', '8c', '9c', 'Tc', 'Jc', 'Qc', 'Kc'];
    return shuffleArray(trumps);
  };

  shuffleArray = function(targetArray) {
    var i, j, length, t, _i, _j, _len, _ref, _results;

    length = targetArray.length;
    _ref = (function() {
      _results = [];
      for (var _j = 0; 0 <= length ? _j < length : _j > length; 0 <= length ? _j++ : _j--){ _results.push(_j); }
      return _results;
    }).apply(this) in targetArray;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      j = Math.floor(Math.random() * length);
      t = targetArray[i];
      targetArray[i] = targetArray[j];
      targetArray[j] = t;
    }
    return targetArray;
  };

  shufflePlayers = function(players) {
    var i, j, length, t, _i, _j, _len, _ref, _results;

    length = players.length;
    _ref = (function() {
      _results = [];
      for (var _j = 0; 0 <= length ? _j < length : _j > length; 0 <= length ? _j++ : _j--){ _results.push(_j); }
      return _results;
    }).apply(this) in players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      j = Math.floor(Math.random() * length);
      t = new players[i].constructor();
      players[i] = new players[j].constructor();
      players[j] = new t.constructor();
      players[i].id = i;
    }
    return players;
  };

  randobet = function(n, b) {
    var a, i, s, _i;

    b = b || '';
    a = 'abcdefghijklmnopqrstuvwxyz' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '0123456789' + b;
    a = a.split('');
    s = '';
    for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
      s += a[Math.floor(Math.random() * a.length)];
    }
    return s;
  };

}).call(this);
