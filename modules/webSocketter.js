// Generated by CoffeeScript 1.6.2
(function() {
  var Config, Controller, createWebSocketter, goToNextHand, makeSocket, waiting, webSockets;

  Config = require('../config');

  Controller = require('./controller');

  webSockets = {};

  createWebSocketter = function(io) {
    return webSockets = io.of('/AI').on('connection', function(socket) {
      return makeSocket(socket);
    });
  };

  module.exports = createWebSocketter;

  makeSocket = function(socket) {
    socket.on('join', function(data) {
      var name;

      name = data.name;
      return Controller.join(data, socket.id, function(responseData) {
        if (responseData.response === 'fail') {
          return socket.emit('joinResponse', {
            status: 'fail',
            errorMessage: responseData.errorMessage
          });
        } else {
          return socket.emit('joinResponse', {
            status: 'ok',
            key: responseData.key,
            message: 'Your name is ' + name
          });
        }
      });
    });
    return socket.on('action', function(data) {
      var tableId;

      tableId = 0;
      return Controller.action(data, function(callbackData) {
        var actionPlayer;

        if (callbackData.status === 'ok') {
          socket.emit('actionResponse', callbackData.message);
          webSockets.emit('takenActionAndResult', callbackData.sendAllTables);
          if (callbackData.nextCommand === 'nextHand') {
            return goToNextHand(tableId, webSockets);
          } else if (callbackData.nextCommand === 'showDown') {
            return Controller.showDown(tableId, function(message) {
              webSockets.emit('showDownResult', message);
              return goToNextHand(tableId, webSockets);
            });
          } else if (callbackData.nextCommand === 'nextPhase') {
            Controller.goToNextPhase(tableId);
            webSockets.emit('tableInfo', Controller.getTableInfo(0));
            actionPlayer = Controller.getActionPlayer(0);
            return webSockets.socket(actionPlayer.socketId).emit('action', {});
          } else if (callbackData.nextCommand === 'nextTurn') {
            Controller.goToNextTurn(tableId);
            webSockets.emit('tableInfo', Controller.getTableInfo(0));
            actionPlayer = Controller.getActionPlayer(0);
            return webSockets.socket(actionPlayer.socketId).emit('action', {});
          }
        }
      });
    });
  };

  waiting = function() {
    var actionPlayer, info, key, socketId, value, _ref;

    if (Controller.getState() === 'waiting') {
      return setTimeout(function() {
        return waiting();
      }, 1000);
    } else if (Controller.getState() === 'gaming') {
      webSockets.emit('start', {
        message: 'Game start!'
      });
      info = Controller.getInfo();
      webSockets.emit('tableInfo', Controller.getTableInfo(0));
      _ref = info.tables[0].players;
      for (key in _ref) {
        value = _ref[key];
        socketId = info.tables[0].players[key].socketId;
        webSockets.socket(socketId).emit('yourSeat', {
          seat: key
        });
        webSockets.socket(socketId).emit('yourHand', {
          hand: info.tables[0].players[key].hand
        });
      }
      actionPlayer = Controller.getActionPlayer(0);
      return webSockets.socket(actionPlayer.socketId).emit('action', {});
    }
  };

  waiting();

  goToNextHand = function(tableId, webSockets) {
    var actionPlayer, key, player, socketId, tableInfoForWebSocketter, _ref;

    Controller.goToNextHand(tableId);
    tableInfoForWebSocketter = Controller.getTableInfoForWebSocketter(tableId);
    webSockets.emit('tableInfo', Controller.getTableInfo(tableId));
    _ref = tableInfoForWebSocketter.players;
    for (key in _ref) {
      player = _ref[key];
      socketId = player.socketId;
      webSockets.socket(socketId).emit('yourHand', {
        hand: player.hand
      });
    }
    actionPlayer = Controller.getActionPlayer(0);
    return webSockets.socket(actionPlayer.socketId).emit('action', {});
  };

}).call(this);
