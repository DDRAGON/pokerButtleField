// Generated by CoffeeScript 1.6.2
(function() {
  var Config, Controller, action, createWebSocketter, goToNextHand, makeSocket, makeSpectatorSocket, nextActionWaitTime, sendSpectatorData, spectatorCounter, spectatorSockets, waiting, webSockets;

  Config = require('../config');

  Controller = require('./controller');

  webSockets = {};

  spectatorSockets = {};

  spectatorCounter = 0;

  nextActionWaitTime = 1000;

  createWebSocketter = function(io) {
    webSockets = io.of('/AI').on('connection', function(socket) {
      return makeSocket(socket);
    });
    return spectatorSockets = io.of('/spectator').on('connection', function(socket) {
      return makeSpectatorSocket(socket);
    });
  };

  module.exports = createWebSocketter;

  makeSocket = function(socket) {
    socket.on('join', function(data) {
      var name;

      name = data.name;
      return Controller.join(data, socket.id, function(responseData) {
        if (responseData.response === 'fail') {
          return socket.emit('joinResponse', {
            status: 'fail',
            errorMessage: responseData.errorMessage
          });
        } else {
          return socket.emit('joinResponse', {
            status: 'ok',
            key: responseData.key,
            message: 'Your name is ' + name
          });
        }
      });
    });
    return socket.on('action', function(data) {
      return action(socket, data);
    });
  };

  makeSpectatorSocket = function(socket) {
    console.log('spectator came!');
    spectatorCounter += 1;
    return socket.emit('spectatorData', Controller.getTableInfo(0));
  };

  waiting = function() {
    var actionPlayer, info, key, socketId, value, _ref;

    if (Controller.getState() === 'waiting') {
      return setTimeout(function() {
        return waiting();
      }, 1000);
    } else if (Controller.getState() === 'gaming') {
      webSockets.emit('start', {
        message: 'Game start!'
      });
      info = Controller.getInfo();
      webSockets.emit('tableInfo', Controller.getTableInfo(0));
      _ref = info.tables[0].players;
      for (key in _ref) {
        value = _ref[key];
        socketId = info.tables[0].players[key].socketId;
        webSockets.socket(socketId).emit('yourSeat', {
          seat: key
        });
        webSockets.socket(socketId).emit('yourHand', {
          hand: info.tables[0].players[key].hand
        });
      }
      actionPlayer = Controller.getActionPlayer(0);
      return webSockets.socket(actionPlayer.socketId).emit('action', {});
    }
  };

  waiting();

  goToNextHand = function(tableId, webSockets) {
    var actionPlayer, key, player, socketId, tableInfoForWebSocketter, _ref;

    Controller.goToNextHand(tableId);
    tableInfoForWebSocketter = Controller.getTableInfoForWebSocketter(tableId);
    webSockets.emit('tableInfo', Controller.getTableInfo(tableId));
    _ref = tableInfoForWebSocketter.players;
    for (key in _ref) {
      player = _ref[key];
      socketId = player.socketId;
      webSockets.socket(socketId).emit('yourHand', {
        hand: player.hand
      });
    }
    actionPlayer = Controller.getActionPlayer(0);
    return webSockets.socket(actionPlayer.socketId).emit('action', {});
  };

  action = function(socket, data) {
    var actionedData, tableId;

    tableId = 0;
    actionedData = Controller.action(data);
    console.log("actionedData.status = " + actionedData.status);
    if (actionedData.status && actionedData.status === 'ok') {
      socket.emit('actionResponse', actionedData.message);
      webSockets.emit('takenActionAndResult', actionedData.sendAllTables);
      return setTimeout(function() {
        var actionPlayer, endCheckResult, key, message, messages;

        if (actionedData.nextCommand === 'nextHand') {
          goToNextHand(tableId, webSockets);
        }
        if (actionedData.nextCommand === 'showDown') {
          messages = Controller.showDown(tableId);
          for (key in messages) {
            message = messages[key];
            webSockets.emit('showDownResult', message);
          }
          Controller.playerSitOut(tableId);
          endCheckResult = Controller.endCheck();
          if (endCheckResult !== false) {
            webSockets.emit('endResult', endCheckResult);
          } else {
            goToNextHand(tableId, webSockets);
          }
        }
        if (actionedData.nextCommand === 'nextPhase') {
          Controller.goToNextPhase(tableId);
          webSockets.emit('tableInfo', Controller.getTableInfo(0));
          actionPlayer = Controller.getActionPlayer(0);
          webSockets.socket(actionPlayer.socketId).emit('action', {});
        }
        if (actionedData.nextCommand === 'autoNextPhase') {
          Controller.goToNextPhase(tableId);
          webSockets.emit('tableInfo', Controller.getTableInfo(0));
          data.action = 'autoNextPhase';
          action(socket, data);
        }
        if (actionedData.nextCommand === 'nextTurn') {
          Controller.goToNextTurn(tableId);
          webSockets.emit('tableInfo', Controller.getTableInfo(0));
          actionPlayer = Controller.getActionPlayer(0);
          return webSockets.socket(actionPlayer.socketId).emit('action', {});
        }
      }, nextActionWaitTime);
    }
  };

  sendSpectatorData = function() {
    if (spectatorCounter > 0) {
      return spectatorSockets.emit('spectatorData', Controller.getSpectatorTableInfo(0));
    }
  };

  setInterval(function() {
    return sendSpectatorData();
  }, Config.getSendSpectatorDataTimeOut());

}).call(this);
